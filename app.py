import streamlit as st  # Importa a biblioteca Streamlit para criar interfaces web interativas
from PIL import Image  # Importa a biblioteca Pillow para processamento de imagens
import numpy as np  # Importa NumPy para opera√ß√µes em arrays (usado em algumas fun√ß√µes de processamento)
import io  # Importa a biblioteca io para manipula√ß√£o de entrada/sa√≠da de bytes (usado para download)

# Importa todas as fun√ß√µes de processamento de imagem do arquivo image_processor.py
from image_processor import (
    grayscale,           # Fun√ß√£o para converter para escala de cinza
    invert_colors,       # Fun√ß√£o para inverter cores da imagem
    increase_contrast,   # Fun√ß√£o para ajustar contraste
    blur_image,          # Fun√ß√£o para aplicar desfoque
    sharpen_image,       # Fun√ß√£o para aumentar nitidez
    edge_detection,      # Fun√ß√£o para detectar bordas
    rotate_image,        # Fun√ß√£o para rotacionar imagem
    resize_image         # Fun√ß√£o para redimensionar imagem
)

def main():
    # Configura as propriedades da p√°gina Streamlit (t√≠tulo, √≠cone e layout)
    st.set_page_config(
        page_title="Visualizador de Imagens",
        page_icon="üñºÔ∏è",
        layout="wide"  # Layout amplo para melhor visualiza√ß√£o das imagens
    )
    
    # Inicializa√ß√£o de vari√°veis de estado da sess√£o
    # Estas vari√°veis persistem entre recarregamentos da p√°gina
    if 'rotation_angle' not in st.session_state:
        st.session_state.rotation_angle = 0  # Inicializa o √¢ngulo de rota√ß√£o como 0 graus
    
    # T√≠tulo principal do aplicativo
    st.title("Visualizador de Imagens com Filtros")
    
    # Configura o layout principal dividindo a tela em duas colunas
    col1, col2 = st.columns(2)
    
    # Caixa para a imagem original com contorno
    with col1:
        st.subheader("üì∑ Imagem Original")
        with st.container(border=True):  # Cria um cont√™iner com borda para a imagem
            original_image_container = st.container()  # Container para imagem original
        original_info = st.empty()  # Placeholder para mostrar dimens√µes da imagem original
    
    # Caixa para a imagem processada com contorno
    with col2:
        st.subheader("‚ú® Imagem com Filtros Aplicados")
        with st.container(border=True):  # Cria um cont√™iner com borda para a imagem processada
            processed_image_container = st.container()  # Container para imagem processada
        processed_info = st.empty()  # Placeholder para mostrar dimens√µes da imagem processada
    
    # Verifica se j√° existe uma imagem na sess√£o, sen√£o mostra o uploader
    if 'image' not in st.session_state:
        with original_image_container:
            st.info("Insira uma imagem para come√ßar")
            # Componente para upload de arquivos, limitado a formatos de imagem
            uploaded_file = st.file_uploader("Escolha uma imagem", type=["jpg", "jpeg", "png"])
            
            if uploaded_file is not None:
                try:
                    # Tenta abrir a imagem com a biblioteca Pillow
                    image = Image.open(uploaded_file)
                    
                    # Converte a imagem para RGB caso esteja em RGBA (com transpar√™ncia)
                    # Isso √© necess√°rio pois alguns filtros n√£o funcionam bem com RGBA
                    if image.mode == 'RGBA':
                        image = image.convert('RGB')
                    
                    # Armazena a imagem e nome do arquivo na sess√£o para uso posterior
                    st.session_state.image = image
                    st.session_state.filename = uploaded_file.name
                    st.rerun()  # Recarrega a p√°gina para mostrar a imagem e os controles
                    
                except Exception as e:
                    # Tratamento de erros ao processar a imagem
                    st.error(f"Erro ao processar a imagem: {e}")
                    st.info("Por favor, certifique-se de que o arquivo √© uma imagem v√°lida.")
    
    # Menu lateral para filtros e transforma√ß√µes
    st.sidebar.title("Filtros e Transforma√ß√µes")
    
    # S√≥ mostra os controles se houver uma imagem carregada
    if 'image' in st.session_state:
        # Recupera a imagem da sess√£o
        image = st.session_state.image
        
        # ---------- SE√á√ÉO DE AJUSTES B√ÅSICOS ----------
        st.sidebar.markdown("### üé® Ajustes B√°sicos")
        
        # Checkbox para ativar/desativar escala de cinza
        apply_grayscale = st.sidebar.checkbox("üî≤ Escala de Cinza")
        
        # Checkbox para ativar/desativar invers√£o de cores
        apply_invert = st.sidebar.checkbox("üîÑ Invers√£o de Cores")
        
        # Controle de contraste com slider
        apply_contrast = st.sidebar.checkbox("üåì Ajuste de Contraste")
        if apply_contrast:
            # Slider de 0 a 100 para ajustar o n√≠vel de contraste
            contrast_level = st.sidebar.slider("N√≠vel de Contraste", 0, 100, 50)
            # Converte o valor do slider (0-100) para um fator de contraste (0.5-2.5)
            contrast_factor = 0.5 + (contrast_level / 50.0)
        
        # ---------- SE√á√ÉO DE EFEITOS ----------
        st.sidebar.markdown("### üñåÔ∏è Efeitos")
        
        # Controle de desfoque (blur)
        apply_blur = st.sidebar.checkbox("üå´Ô∏è Desfoque (Blur)")
        if apply_blur:
            # Slider para controlar a intensidade do desfoque
            blur_amount = st.sidebar.slider("Intensidade do Desfoque", 0, 10, 2)
        else:
            blur_amount = 0  # Define como 0 se n√£o aplicar
        
        # Controle de nitidez (sharpen)
        apply_sharpen = st.sidebar.checkbox("‚úèÔ∏è Nitidez (Sharpen)")
        if apply_sharpen:
            # Slider para controlar a intensidade da nitidez
            sharpen_amount = st.sidebar.slider("Intensidade da Nitidez", 0, 10, 5)
        else:
            sharpen_amount = 0  # Define como 0 se n√£o aplicar
        
        # Controle de detec√ß√£o de bordas
        apply_edge = st.sidebar.checkbox("üß© Detector de Bordas")
        if apply_edge:
            # Sliders para ajustar os par√¢metros da detec√ß√£o de bordas
            edge_lower = st.sidebar.slider("Sensibilidade de Detec√ß√£o", 0, 255, 100)
            edge_upper = st.sidebar.slider("Intensidade das Bordas", 0, 255, 200)
        
        # ---------- SE√á√ÉO DE TRANSFORMA√á√ïES ----------
        st.sidebar.markdown("### üìê Transforma√ß√µes")
        
        # Controle de rota√ß√£o
        apply_rotation = st.sidebar.checkbox("üîÑ Rota√ß√£o")
        if apply_rotation:
            # Cria duas colunas para os bot√µes de rota√ß√£o
            col1, col2 = st.sidebar.columns(2)
            with col1:
                # Bot√£o para rotacionar 90¬∞ no sentido anti-hor√°rio
                if st.button("‚Ü∫ Girar 90¬∞ Anti-hor√°rio"):
                    # Atualiza o √¢ngulo na sess√£o (mant√©m entre 0-359¬∞)
                    st.session_state.rotation_angle = (st.session_state.rotation_angle - 90) % 360
                    st.rerun()  # Recarrega para aplicar a rota√ß√£o
            with col2:
                # Bot√£o para rotacionar 90¬∞ no sentido hor√°rio
                if st.button("‚Üª Girar 90¬∞ Hor√°rio"):
                    # Atualiza o √¢ngulo na sess√£o (mant√©m entre 0-359¬∞)
                    st.session_state.rotation_angle = (st.session_state.rotation_angle + 90) % 360
                    st.rerun()  # Recarrega para aplicar a rota√ß√£o
            
            # Exibe o √¢ngulo atual de rota√ß√£o
            st.sidebar.write(f"√Çngulo atual: {st.session_state.rotation_angle}¬∞")
            rotation_angle = st.session_state.rotation_angle
        else:
            rotation_angle = 0  # Sem rota√ß√£o se o checkbox n√£o estiver marcado
        
        # Controle de redimensionamento
        apply_resize = st.sidebar.checkbox("üîç Redimensionar")
        if apply_resize:
            # Obt√©m as dimens√µes originais da imagem
            original_width, original_height = image.size
            st.sidebar.write(f"Tamanho original: {original_width} √ó {original_height} pixels")
            
            # Slider para ajustar a porcentagem do tamanho
            resize_percentage = st.sidebar.slider("Porcentagem do Tamanho Original", 10, 200, 100)
            
            # Calcula e exibe o novo tamanho em pixels
            new_width = int(original_width * resize_percentage / 100)
            new_height = int(original_height * resize_percentage / 100)
            st.sidebar.write(f"Novo tamanho: {new_width} √ó {new_height} pixels")
        else:
            resize_percentage = 100  # 100% = tamanho original
        
        # Bot√£o para limpar e recome√ßar
        st.sidebar.markdown("---")  # Linha horizontal para separar
        if st.sidebar.button("üóëÔ∏è Limpar e Recome√ßar"):
            # Remove todas as vari√°veis da sess√£o
            for key in list(st.session_state.keys()):
                del st.session_state[key]
            st.rerun()  # Recarrega a p√°gina para o estado inicial
        
        # ---------- EXIBI√á√ÉO DA IMAGEM ORIGINAL ----------
        with original_image_container:
            # Mostra a imagem original (ajustada para preencher o container)
            st.image(image, use_container_width=True)
        
        # Mostra as dimens√µes da imagem original
        width, height = image.size
        original_info.write(f"Dimens√µes: {width} √ó {height} pixels")
        
        # ---------- PROCESSAMENTO DA IMAGEM ----------
        # Cria uma c√≥pia da imagem original para n√£o modific√°-la
        processed_image = image.copy()
        
        # Aplica os filtros selecionados na ordem especificada
        # A ordem pode afetar o resultado final
        
        # 1. Filtro de escala de cinza
        if apply_grayscale:
            processed_image = grayscale(processed_image)
        
        # 2. Filtro de invers√£o de cores
        if apply_invert:
            processed_image = invert_colors(processed_image)
        
        # 3. Ajuste de contraste
        if apply_contrast:
            processed_image = increase_contrast(processed_image, factor=contrast_factor)
        
        # 4. Filtro de desfoque (blur)
        if apply_blur and blur_amount > 0:
            processed_image = blur_image(processed_image, blur_amount)
        
        # 5. Filtro de nitidez (sharpen)
        if apply_sharpen and sharpen_amount > 0:
            processed_image = sharpen_image(processed_image, sharpen_amount)
        
        # 6. Filtro de detec√ß√£o de bordas
        if apply_edge:
            processed_image = edge_detection(processed_image, threshold1=edge_lower, threshold2=edge_upper)
        
        # Aplica transforma√ß√µes geom√©tricas
        # 7. Rota√ß√£o
        if apply_rotation and rotation_angle != 0:
            processed_image = rotate_image(processed_image, rotation_angle)
        
        # 8. Redimensionamento
        if apply_resize and resize_percentage != 100:
            processed_image = resize_image(processed_image, resize_percentage / 100.0)
        
        # ---------- EXIBI√á√ÉO DA IMAGEM PROCESSADA ----------
        with processed_image_container:
            # Mostra a imagem processada (ajustada para preencher o container)
            st.image(processed_image, use_container_width=True)
        
        # Mostra as dimens√µes da imagem processada
        p_width, p_height = processed_image.size
        processed_info.write(f"Dimens√µes: {p_width} √ó {p_height} pixels")
        
        # ---------- OP√á√ÉO DE DOWNLOAD ----------
        st.write("## üíæ Salvar Resultado")
        if st.button("Salvar Imagem Processada"):
            # Cria um buffer de bytes para salvar a imagem
            buf = io.BytesIO()
            processed_image.save(buf, format="PNG")  # Salva a imagem em formato PNG
            byte_im = buf.getvalue()  # Obt√©m os bytes da imagem
            
            # Gera um nome para o arquivo processado baseado no nome original
            original_filename = st.session_state.filename
            name_parts = original_filename.split('.')
            if len(name_parts) > 1:
                # Se o nome tiver extens√£o, adiciona "_processado" antes da extens√£o
                new_filename = f"{name_parts[0]}_processado.png"
            else:
                # Caso contr√°rio, usa um nome padr√£o
                new_filename = "imagem_processada.png"
            
            # Cria um bot√£o de download que permite salvar a imagem processada
            st.download_button(
                label="Download da Imagem",
                data=byte_im,
                file_name=new_filename,
                mime="image/png"
            )

# Verifica se este arquivo est√° sendo executado diretamente
# (n√£o est√° sendo importado como um m√≥dulo)
if __name__ == "__main__":
    main()  # Chama a fun√ß√£o principal para iniciar o aplicativo